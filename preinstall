#!/bin/bash

# Arch Linux Initial Partition Setup Script
# WARNING: This script will DESTROY all data on the target disk!

set -e  # Exit on any error

# Configuration
EFI_SIZE="1G"

# Color output for better visibility
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check system time and timezone
echo -e "${GREEN}Checking system time and timezone:${NC}"
timedatectl

# Function to select target disk
select_disk() {
    echo -e "\n${GREEN}Available disks:${NC}"
    echo "======================================"
    
    # Get list of disks with details
    mapfile -t DISKS < <(lsblk -d -n -o NAME,SIZE,MODEL,TYPE | grep disk)
    
    if [ ${#DISKS[@]} -eq 0 ]; then
        echo -e "${RED}No disks found!${NC}"
        exit 1
    fi
    
    # Display numbered list
    for i in "${!DISKS[@]}"; do
        disk_name=$(echo "${DISKS[i]}" | awk '{print $1}')
        disk_info="${DISKS[i]}"
        echo "  $((i+1))) /dev/$disk_info"
    done
    
    echo -e "\n${YELLOW}Select the disk to install Arch Linux on:${NC}"
    while true; do
        read -p "Enter number (1-${#DISKS[@]}): " choice
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#DISKS[@]} ]; then
            selected_index=$((choice-1))
            DISK="/dev/$(echo "${DISKS[$selected_index]}" | awk '{print $1}')"
            break
        else
            echo -e "${RED}Invalid selection. Please enter a number between 1 and ${#DISKS[@]}.${NC}"
        fi
    done
    
    echo -e "\n${GREEN}Selected disk: ${DISK}${NC}"
    
    # Show detailed info about selected disk
    echo -e "\n${YELLOW}Detailed information for ${DISK}:${NC}"
    lsblk ${DISK}
    
    # Final confirmation
    echo -e "\n${RED}WARNING: This will COMPLETELY ERASE ${DISK}!${NC}"
    echo -e "${YELLOW}Are you absolutely sure? Type 'YES' to continue:${NC}"
    read -p "> " confirmation
    
    if [ "$confirmation" != "YES" ]; then
        echo "Installation cancelled."
        exit 0
    fi
}

# Interactive disk selection
select_disk

echo -e "${GREEN}Starting partition setup on ${DISK}${NC}"

# Unmount any mounted partitions from the target disk
echo "Unmounting any existing partitions from ${DISK}..."
# Only unmount partitions that are actually mounted from our target disk
for partition in $(lsblk -ln -o NAME ${DISK} | grep -v "^$(basename ${DISK})$"); do
    if mountpoint -q "/dev/${partition}" 2>/dev/null; then
        echo "Unmounting /dev/${partition}"
        umount "/dev/${partition}" 2>/dev/null || true
    fi
done

# Wipe existing partition table and create new GPT
echo "Creating new GPT partition table..."
parted -s ${DISK} mklabel gpt

# Create EFI System Partition (1GB)
echo "Creating EFI System Partition (${EFI_SIZE})..."
parted -s ${DISK} mkpart fat32 1MiB ${EFI_SIZE}
parted -s ${DISK} set 1 esp on

# Create Linux root partition (remaining space)
echo "Creating Linux root partition..."
parted -s ${DISK} mkpart ext4 ${EFI_SIZE} 100%

# Force kernel to re-read partition table
echo "Re-reading partition table..."
partprobe ${DISK}
sleep 2

# Determine partition names (handle both /dev/sda and /dev/nvme0n1 naming)
if [[ ${DISK} == *"nvme"* ]]; then
    EFI_PARTITION="${DISK}p1"
    ROOT_PARTITION="${DISK}p2"
else
    EFI_PARTITION="${DISK}1"
    ROOT_PARTITION="${DISK}2"
fi

echo "EFI partition: ${EFI_PARTITION}"
echo "Root partition: ${ROOT_PARTITION}"

# Format EFI System Partition
echo "Formatting EFI System Partition..."
mkfs.fat -F 32 ${EFI_PARTITION}

# Format Linux root partition
echo "Formatting Linux root partition..."
mkfs.ext4 -F ${ROOT_PARTITION}

echo -e "${GREEN}Partitioning and formatting complete!${NC}"
echo "EFI System Partition: ${EFI_PARTITION} (FAT32)"
echo "Linux Root Partition: ${ROOT_PARTITION} (ext4)"

# Display partition layout
echo -e "\n${GREEN}Final partition layout:${NC}"
parted ${DISK} print

# Mount the partitions
echo -e "\n${GREEN}Mounting partitions...${NC}"
mount ${ROOT_PARTITION} /mnt
mount --mkdir ${EFI_PARTITION} /mnt/boot

echo -e "${GREEN}Partitions mounted successfully!${NC}"
echo "Root partition mounted at: /mnt"
echo "EFI partition mounted at: /mnt/boot"

# Verify mounts
echo -e "\n${GREEN}Mount verification:${NC}"
df -h /mnt /mnt/boot

# scripts
curl -L -O https://raw.githubusercontent.com/soaresluciano/arch/refs/heads/main/install.sh
chmod +x setup.sh
curl -L -O https://raw.githubusercontent.com/soaresluciano/arch/refs/heads/main/setup.sh
chmod +x setup.sh

